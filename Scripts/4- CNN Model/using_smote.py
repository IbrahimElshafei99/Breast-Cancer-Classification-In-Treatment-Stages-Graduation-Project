# -*- coding: utf-8 -*-
"""Using SMOTE

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16D7m5Kjv7F2oL9hyFcfIq9jPYN4GyDbp
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import matplotlib.pyplot as plt
import cv2
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Activation, Dense, Flatten, Dropout
from keras import optimizers
from sklearn import metrics 
from keras.utils.np_utils import to_categorical
import pickle
from sklearn import metrics
from sklearn.metrics import accuracy_score
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator

pickle_in=open('/content/drive/MyDrive/Graduation Project/X.pickle','rb')
X=pickle.load(pickle_in)
pickle_in=open('/content/drive/MyDrive/Graduation Project/y.pickle','rb')
y=pickle.load(pickle_in)

print(X.shape)
y=np.array(y)
print(y.shape)

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# %%bash
# pip install imbalanced-learn

"""take a sample of 0s(majority class)"""

X_sample=X[0:60]
y_sample=y[0:60]

from imblearn.over_sampling import SMOTE

smote=SMOTE(sampling_strategy='minority')
#reshape X to resample by STOME also the X_sample
Xre=X.reshape(930,200*200)
X_sample=X_sample.reshape(60,200*200)

#STOME increases number of minority class(1s) to equal the majority class(0s)
X_sm, y_sm=smote.fit_resample(Xre, y)

#concatinate X_sample with lable 0 to X_sm to return 0s class the majority
for s in X_sample:
  X_sm = np.append(X_sm, s)

X = X_sm.reshape(1440,200,200) #reshape the total X

#concatinate y_sample to y_sm to return 0s class the majority
for s in y_sample:
  y_sm = np.append(y_sm, s)


print('1s = ',np.count_nonzero(y_sm))
print('total X: ', X.shape)
print('total y: ', y_sm.shape)

from sklearn.utils import compute_class_weight
from sklearn.utils import class_weight

class_weights = compute_class_weight('balanced', 
                                     classes = np.unique(y_sm), 
                                     y = y_sm)
y_sm = to_categorical(y_sm, 2)
print('total y: ', y_sm.shape)


X_train, X_test, y_train, y_test = train_test_split(X, y_sm, test_size=0.20, random_state=0, shuffle=True)
print('Xtrain: ', X_train.shape)
print('Xtest: ', X_test.shape)

class_weights = {i : class_weights[i] for i in range(2)}
print(class_weights)

model=Sequential()
model.add(Conv2D(16,(3,3),strides=(2,2),input_shape=(200,200,1),padding='same',activation='relu',kernel_initializer='uniform'))
model.add(Conv2D(16,(3,3),strides=(1,1),padding='same',kernel_initializer='uniform',activation='relu'))
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(32,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))
model.add(Conv2D(32,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))
model.add(MaxPooling2D((2,2)))

model.add(Conv2D(64,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))
model.add(Conv2D(64,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))
model.add(MaxPooling2D((2,2)))

model.add(Flatten())
model.add(Dense(64,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(2,activation='sigmoid'))

        #compile
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])


####################
dataGen = ImageDataGenerator(rotation_range=40, width_shift_range=0.08, height_shift_range=0.08, 
                             shear_range=0.08, zoom_range=0.08, horizontal_flip=True, fill_mode='reflect')

AugTrain = dataGen.flow(X_train.reshape(1152,200,200,1),y_train, batch_size = 10)
AugTest = dataGen.flow(X_test.reshape(288,200,200,1),y_test, batch_size = 10)

###################
model.fit_generator(AugTrain,
                    steps_per_epoch=1152 // 10,
                    epochs=20, 
                    validation_data=AugTest,
                    validation_steps=288 // 10,
                    class_weight=class_weights)

loss1, acc1 = model.evaluate_generator(AugTrain)
print ('\n-------------\nModel Training Accuracy: ' , acc1*100 , '%')

loss2, acc2 = model.evaluate_generator(AugTest)
print ('Model Testing Accuracy: ' , acc2*100 , '%\n-------------\n')

from sklearn.metrics import f1_score, accuracy_score, confusion_matrix
from sklearn.metrics import classification_report

y_predall = model.predict(X_test)
y_pred = np.argmax(y_predall,axis=1)
y_test = np.argmax(y_test,axis=1)

print(classification_report(y_test, y_pred))

print(model.predict(X[300:330]))

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import numpy as np
from collections import Counter
import itertools

def plot_confusion_matrix2(cm,
                          target_names,
                          title='Confusion matrix',
                          cmap=None,
                          normalize=True):
    accuracy = np.trace(cm) / np.sum(cm).astype('float')
    misclass = 1 - accuracy

    if cmap is None:
        cmap = plt.get_cmap('cool') ##https://matplotlib.org/3.1.1/gallery/color/colormap_reference.html

    plt.figure(figsize=(8, 6))
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()

    if target_names is not None:
        tick_marks = np.arange(len(target_names))
        plt.xticks(tick_marks, target_names, rotation=45)
        plt.yticks(tick_marks, target_names)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]


    thresh = cm.max() / 1.5 if normalize else cm.max() / 2
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        if normalize:
            plt.text(j, i, "{:0.4f}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")
        else:
            plt.text(j, i, "{:,}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")


    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))
    plt.show()

cm = confusion_matrix(y_test, y_pred)
plot_confusion_matrix2(cm,["Negative" , "Positive"], cmap=plt.get_cmap("Reds") , normalize=False)

y_predall = model.predict(X_train)
y_predtrain = np.argmax(y_predall,axis=1)
y_train = np.argmax(y_train,axis=1)

cm = confusion_matrix(y_train, y_predtrain)
plot_confusion_matrix2(cm,["Negative" , "Positive"], cmap=plt.get_cmap("Reds") , normalize=False)

y_predall = model.predict(X)
y_predall1 = np.argmax(y_predall,axis=1)
y=np.argmax(y_sm,axis=1)

cm = confusion_matrix(y, y_predall1)
plot_confusion_matrix2(cm,["Negative" , "Positive"], cmap=plt.get_cmap("Reds") , normalize=False)

model.save('/content/drive/MyDrive/Graduation Project/SMOTE3')